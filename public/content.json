{"meta":{"title":"Rainbow","subtitle":"Rainbow's Blog","description":"生命不息，摸鱼不止","author":"Rainbow Chen","url":"http://example.com","root":"/"},"pages":[{"title":"所有分类","date":"2021-12-14T08:04:34.361Z","updated":"2021-12-14T08:04:34.361Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2021-12-14T08:04:08.027Z","updated":"2021-12-14T08:04:08.027Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"所有标签","date":"2021-12-14T08:04:53.439Z","updated":"2021-12-14T08:04:53.439Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"test","slug":"test","date":"2021-12-15T01:57:24.000Z","updated":"2021-12-15T06:09:51.460Z","comments":true,"path":"test.html","link":"","permalink":"http://example.com/test.html","excerpt":"","text":"1const a = 123","categories":[],"tags":[],"author":"Rainbow"},{"title":"Git基础操作","slug":"note/git","date":"2021-06-29T08:27:33.000Z","updated":"2021-12-15T08:59:29.925Z","comments":true,"path":"note/git.html","link":"","permalink":"http://example.com/note/git.html","excerpt":"","text":"虽然SourceTree、TortoiseGit等GUI软件能非常直观便捷的操作Git仓库，但掌握Git相关基础操作还是必须的。 前期准备（MacOS）生成SSH密钥并设置输入如下命令来生成ssh key： 12ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot; # Generating public/private rsa key pair... ❗️❗️❗️ 注意：这里的xxxxx@xxxxx.com只是生成的ssh key的名称，并不约束或要求具体命名为某个邮箱。现网的大部分教程均讲解的使用邮箱生成，其一开始的初衷仅仅是为了便于辨识所以使用了邮箱。 按照提示完成三次回车，即可生成ssh key。通过查看~/.ssh/id_rsa.pub文件内容，获取到你的public key 12cat ~/.ssh/id_rsa.pub# ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc.... 将上述的ssh key配置到Github或者码云 配置多个ssh key点击查看 Git基础操作仓库基本管理初始化一个Git仓库 12$ cd 文件夹目录$ git init 将修改的内容提交到本地Git暂存区 123$ git add &#x27;文件&#x27;# 或者$ git add . 或 git add -A (提交当前所有改动) 将暂存区的内容提交到本地Git仓库 1$ git commit -m &#x27;消息&#x27; :pushpin: 提示: -m 后面为提交的备注信息。 将本地Git仓库的信息推送到远程仓库 1234$ git push git地址# 若本地已关联了远程仓库$ git push 仓库别名 分支 将远程仓库同步到本地仓库 1234$ git pull git地址# 若本地已关联了远程仓库$ git pull 仓库别名 分支 远程仓库管理修改仓库名 一般来讲，默认情况下，在执行clone或者其他操作时，仓库名都是origin果说我们想给他改改名字，比如我不喜欢origin这个名字，想改为test那么就要在仓库目录下执行命令: 12# 修改远程仓库名字为了test。$ git remote rename origin test 关联仓库 不执行clone操作时，想将本地库与远程库管理，可以执行 1$ git remote add 仓库别名 仓库地址 :pushpin: 提示: origin是你的仓库的别名可以随便改，但请务必不要与已有的仓库别名冲突 仓库地址一般来讲支持http/https/ssh/git协议，其他协议地址请勿添加 查看当前仓库对应的远程仓库地址 1git remote -v 这条命令能显示你当前仓库中已经添加了的仓库名和对应的仓库地址，通常来讲，会有两条一模一样的记录，分别是fetch和push，其中fetch是用来从远程同步，push是用来推送到远程。 修改仓库对应的远程仓库地址 1git remote set-url origin 仓库地址 仓库分支操作查看分支 12$ git branch ( -r |-a ) :pushpin: 提示: 末尾没有任何尾缀为查看本地所有分支 末尾有-r为查看远分所有支 末尾有-a为查看远程和本地所有分支 新建分支，并依然停留在当前分支 1$ git branch 分支名字 新建一个分支，并切换到该分支 1$ git checkout -b 分支名字 新建一个分支，指向指定commit 1$ git branch 分支名字 commit记录 本地新建一个分支，并推送到远程 12$ git checkout -b 分支名字 $ git push 仓库名 分支名字:分支名字 //远程没有该分支会自动创建 切换到指定分支，并更新工作区 1$ git checkout 分支名字 合并指定分支到当前分支区 1$ git merge 分支名字 删除分支 1$ git branch -d 分支名字 删除远程分支 123$ git push origin --delete 分支名字# 或者$ git branch -dr [仓库名/分支名字] 提交规范1234567891011121314151617# 主要typefeat: 增加新功能fix: 修复bug# 特殊typedocs: 只改动了文档相关的内容style: 不影响代码含义的改动，例如去掉空格、改变缩进、增删分号build: 构造工具的或者外部依赖的改动，例如webpack，npmrefactor: 代码重构时使用revert: 执行git revert打印的message# 暂不使用typetest: 添加测试或者修改现有测试perf: 提高性能的改动ci: 与CI（持续集成服务）有关的改动chore: 不修改src或者test的其余修改，例如构建过程或辅助工具的变动 其他其他Git操作或具体操作，请查看码云的相关帮助文档 Q&amp;A 合并分支报无相关历史1git merge 分支名 --allow-unrelated-historie github于2020年10月1日起，默认分支为main，而本地创建默认分支仍未master，怎么推送1git push origin matser:main","categories":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}],"author":"Rainbow"}],"categories":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]}